<?xml version="1.0" encoding="UTF-8"?>

<!-- ************************************************************************************ -->
<!-- Copyright Â© 2018 BroadSoft Inc. All rights reserved.-->
<!-- ************************************************************************************ -->
<!-- O C I   X M L   S C H E M A   L O G I N   P A R T                                    -->
<!--                                                                                      -->
<!-- This file defines the XML Schema for the BroadSoft Application Server                -->
<!-- Open Client Interface (OCI).                                                         -->
<!-- ************************************************************************************ -->
<xs:schema xmlns:core="C" xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="qualified" elementFormDefault="qualified">

  <xs:import namespace="C" schemaLocation="OCISchemaBASE.xsd"/>

  <xs:include schemaLocation="OCISchemaDataTypes.xsd"/>

  <!-- ************************************************************************************ -->
  <!-- L O G I N   R E Q U E S T S   A N D   R E S P O N S E S                              -->
  <!-- ************************************************************************************ -->
  <!--
  Requests and responses are listed here in alphabetical order.
  The non-primitive attributes inside the commands are defined in another
  section of the schema.

  Requests in this schema file:
    AuthenticationVerifyRequest22V4
    AvailabilityTestRequest
    DeviceManagementFileAuthLocationGetRequest22V3
    DeviceManagementPutFileRequest
    ExternalAuthenticationAuthorizeTokenRequest22
    ExternalAuthenticationCreateLoginTokenRequest
    LoginRequest22V5
    LogoutRequest
    LongLivedTokenRevokeRequest
    PasswordGenerateRequest
    PasswordModifyRequest
    PrimaryInfoGetRequest
    PublicClusterGetFullyQualifiedDomainNameRequest
    TutorialFlagGetRequest
    TutorialFlagModifyRequest
    UserGetLoginInfoRequest22V4
    UserSingleSignOnCreateDeviceTokenRequest
    VerifySessionIsValidRequest
-->

  <xs:complexType name="AuthenticationVerifyRequest22V4">
    <xs:annotation>
      <xs:documentation>
        AuthenticationVerifyRequest22V4 is used to authenticate a user either by userId/password, userId/sip username/sip password,
        dn/passcode, lineport/password or a token previously authorized with the ExternalAuthenticationAuthorizeTokenRequest.
        The phone number may be any DN associated with a user.
        The lineport may be any lineport associated with a user.
        The password used for the lineport is the user's password associated with userId.

        The response is a AuthenticationVerifyResponse22V4 or an ErrorResponse
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:choice>
          <xs:sequence>
            <xs:element name="userId" type="UserId"/>
            <xs:element name="password" type="Password"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="phoneNumber" type="DN"/>
            <xs:element name="passcode" type="Passcode"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="linePort" type="AccessDeviceEndpointLinePort"/>
            <xs:element name="password" type="Password"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="loginToken" type="LoginToken"/>
          </xs:sequence>
          <xs:sequence>
            <xs:element name="sipAuthenticationUserName" type="SIPAuthenticationUserName"/>
            <xs:element name="sipAuthenticationPassword" type="SIPAuthenticationPassword"/>
            <xs:element name="userId" type="UserId"/>
          </xs:sequence>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AuthenticationVerifyResponse22V4">
    <xs:annotation>
      <xs:documentation>
        Response to AuthenticationVerifyRequest22V4

        The following data elements are only returned in AS data mode:
          resellerId

        If a phoneNumber is returned, it will be the primary DN of the user.

        The parameter tokenRevocationTime is represented in the number of milliseconds
        since January 1, 1970, 00:00:00 GMT, and it is set to the more current time between
        the system level token revocation time and user level token revocation time.

      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="loginType" type="LoginType22"/>
          <xs:element name="locale" type="OCILocale22"/>
          <xs:element name="encoding" type="Encoding"/>
          <xs:element name="groupId" type="GroupId" minOccurs="0"/>
          <xs:element name="serviceProviderId" type="ServiceProviderId" minOccurs="0"/>
          <xs:element name="isEnterprise" type="xs:boolean"/>
          <xs:element name="passwordExpiresDays" type="xs:int" minOccurs="0"/>
          <xs:element name="lastName" type="LastName" minOccurs="0"/>
          <xs:element name="firstName" type="FirstName" minOccurs="0"/>
          <xs:element name="userId" type="UserId"/>
          <xs:element name="phoneNumber" type="DN" minOccurs="0"/>
          <xs:element name="resellerId" type="ResellerId22" minOccurs="0"/>
          <xs:element name="tokenRevocationTime" type="xs:long" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AvailabilityTestRequest">
    <xs:annotation>
      <xs:documentation>
        AvailabilityTestRequest is for high-availability support. Response is either SuccessResponse
        or ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DeviceManagementFileAuthLocationGetRequest22V3">
    <xs:annotation>
      <xs:documentation>
        Get the address and credentials of the File Repository hosting the requested access device file.
        Also get the file name and path on the File Repository.
        The response is either DeviceManagementFileAuthLocationGetResponse22V3 or ErrorResponse.
        The following elements are only used in AS data mode and will fail in XS data mode:
          deviceToken
        The following elements are only used in XS data mode and will be ignored in AS data mode:
          fileNameLookup
          fileNameOnDisk
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="deviceAccessProtocol" type="DeviceAccessProtocol22"/>
          <xs:element name="deviceAccessMethod" type="FileRepositoryAccessType"/>
          <xs:element name="deviceAccessURI" type="DeviceManagementAccessURI"/>
          <xs:element name="accessDeviceUserName" type="UserId" minOccurs="0"/>
          <xs:element name="accessDeviceUserPassword" type="Password" minOccurs="0"/>
          <xs:element name="deviceToken" type="LoginToken" minOccurs="0"/>
          <xs:element name="signedPassword" type="SignedPassword" minOccurs="0"/>
          <xs:element name="macAddress" type="AccessDeviceMACAddress" minOccurs="0"/>
          <xs:element name="realmName" type="RealmName" minOccurs="0"/>
          <xs:element name="digestHa1Complement" type="DigestHa1Complement" minOccurs="0"/>
          <xs:element name="digestResponse" type="Md5Hash" minOccurs="0"/>
          <xs:element name="fileNameLookup" type="xs:boolean" minOccurs="0"/>
          <xs:element name="fileNameOnDisk" type="CPESystemFileName" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DeviceManagementFileAuthLocationGetResponse22V3">
    <xs:annotation>
      <xs:documentation>
        This is a response to DeviceManagementFileAuthLocationGetRequest22V3.
        Return the address and credentials of the File Repository hosting the requested access device file.
        Also return the file name and path on the File Repository.
        Also returns the status of the file authentication.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="status" type="DeviceManagementFileAuthenticationStatus" minOccurs="0"/>
          <xs:element name="fileRepositoryUserName" type="FileRepositoryUserName"/>
          <xs:element name="fileRepositoryPassword" type="FileRepositoryUserPassword"/>
          <xs:element name="netAddress" type="NetAddress"/>
          <xs:element name="remoteFileFormat" type="DeviceManagementFileFormat"/>
          <xs:element name="portNumber" type="Port" minOccurs="0"/>
          <xs:element name="rootDirectory" type="CPEFileDirectory" minOccurs="0"/>
          <xs:element name="cpeFileDirectory" type="CPEFileDirectory" minOccurs="0"/>
          <xs:element name="secure" type="xs:boolean" minOccurs="0"/>
          <xs:element name="macInNonRequestURI" type="xs:boolean" minOccurs="0"/>
          <xs:element name="macInCert" type="xs:boolean" minOccurs="0"/>
          <xs:element name="macFormatInNonRequestURI" type="DeviceManagementAccessURI" minOccurs="0"/>
          <xs:element name="useHttpDigestAuthentication" type="xs:boolean" minOccurs="0"/>
          <xs:element name="macBasedFileAuthentication" type="xs:boolean" minOccurs="0"/>
          <xs:element name="userNamePasswordFileAuthentication" type="xs:boolean" minOccurs="0"/>
          <xs:element name="completionNotification" type="xs:boolean" minOccurs="0"/>
          <xs:element name="fileCategory" type="DeviceManagementFileCategory22" minOccurs="0"/>
          <xs:element name="enableCaching" type="xs:boolean" minOccurs="0"/>
          <xs:element name="notifyFileUpload" type="xs:boolean" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DeviceManagementPutFileRequest">
    <xs:annotation>
      <xs:documentation>
          Informs BroadWorks that a file was uploaded to the repository. The response is always a SuccessResponse.
        </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="deviceAccessURI" type="DeviceManagementAccessURI"/>
          <xs:element name="ipAddress" type="NetAddress"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ExternalAuthenticationAuthorizeTokenRequest22">
    <xs:annotation>
      <xs:documentation>
        This command is part of the Portal API.
        Sent when a Web or CLI user logs in using external authentication.
        The hashed password value in the request is supported only when the request is sent from the CommPilot web portal.
        The response is either SuccessResponse or ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="userId" type="UserId"/>
          <xs:element name="password" type="Password256" minOccurs="0"/>
          <xs:element name="isPasswordHashed" type="xs:boolean" minOccurs="0"/>
          <xs:element name="loginToken" type="LoginToken"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ExternalAuthenticationCreateLoginTokenRequest">
    <xs:annotation>
      <xs:documentation>
        This command allows a BroadWorks or Third-Party Client Application to
        create a Single Sign-On token for a user.
        The response is either ExternalAuthenticationCreateLoginTokenResponse
        or ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="userId" type="UserId"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ExternalAuthenticationCreateLoginTokenResponse">
    <xs:annotation>
      <xs:documentation>
        Response to ExternalAuthenticationCreateLoginTokenRequest.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="loginToken" type="LoginToken"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LoginRequest22V5">
    <xs:annotation>
      <xs:documentation>
        Request to login to OCI.
        password is not required for external authentication login from a trusted host (ACL).

        The following data element is only used in XS data mode and will be ignored in AS data mode:
          signedPassword
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="userId" type="UserId"/>
          <xs:element name="password" type="Password" minOccurs="0"/>
          <xs:element name="signedPassword" type="SignedPassword" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LoginResponse22V5">
    <xs:annotation>
      <xs:documentation>
        Response to the OCI login request.

        The following data elements are only returned in AS data mode:
          resellerId

        The parameter tokenRevocationTime is represented in the number of milliseconds
        since January 1, 1970, 00:00:00 GMT, and it is set to the more current time between
        the system level token revocation time and user level token revocation time.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="loginType" type="LoginType22"/>
          <xs:element name="locale" type="OCILocale22"/>
          <xs:element name="encoding" type="Encoding"/>
          <xs:element name="groupId" type="GroupId" minOccurs="0"/>
          <xs:element name="serviceProviderId" type="ServiceProviderId" minOccurs="0"/>
          <xs:element name="isEnterprise" type="xs:boolean"/>
          <xs:element name="passwordExpiresDays" type="xs:int" minOccurs="0"/>
          <xs:element name="userDomain" type="NetAddress"/>
          <xs:element name="resellerId" type="ResellerId22" minOccurs="0"/>
          <xs:element name="tokenRevocationTime" type="xs:long" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LogoutRequest">
    <xs:annotation>
      <xs:documentation>
        LogoutRequest is sent when an OCI user logs out or when connection is lost.
        This command can be sent either to the server, or to the client from OCS.
        Response is either SuccessResponse or ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="userId" type="UserId"/>
          <xs:element name="reason" type="LogoutRequestReason" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LongLivedTokenRevokeRequest">
    <xs:annotation>
      <xs:documentation>
        Revoke all previously issued long lived tokens.
        If the userId is not specified, revoke all tokens in the system.
        If the userId is specified, revoke all tokens issued to the user.
        The response is either a SuccessResponse or an ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="userId" type="UserId" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PasswordGenerateRequest">
    <xs:annotation>
      <xs:documentation>
        Generate passwords based on the corresponding password/passcode rules.
        The response is either PasswordGenerateResponse or ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="systemAdministratorPassword" type="PasswordForSystemAdministrator" minOccurs="0"/>
          <xs:element name="serviceProviderAdministratorPassword" type="PasswordForServiceProviderAdministrator" minOccurs="0"/>
          <xs:element name="groupAdministratorPassword" type="PasswordForGroupAdministrator" minOccurs="0"/>
          <xs:element name="userPassword" type="PasswordForUser" minOccurs="0"/>
          <xs:element name="accessDeviceAuthenticationPassword" type="PasswordForAccessDevice" minOccurs="0"/>
          <xs:element name="trunkGroupAuthenticationPassword" type="PasswordForTrunkGroup" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PasswordGenerateResponse">
    <xs:annotation>
      <xs:documentation>
        Response to the PasswordGenerateRequest.
        The response contains the requested passwords.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="systemAdministratorPassword" type="Password" minOccurs="0"/>
          <xs:element name="serviceProviderAdministratorPassword" type="Password" minOccurs="0"/>
          <xs:element name="groupAdministratorPassword" type="Password" minOccurs="0"/>
          <xs:element name="userPassword" type="Password" minOccurs="0"/>
          <xs:element name="userPasscode" type="Passcode" minOccurs="0"/>
          <xs:element name="userSIPAuthenticationPassword" type="Password" minOccurs="0"/>
          <xs:element name="accessDeviceAuthenticationPassword" type="Password" minOccurs="0"/>
          <xs:element name="trunkGroupAuthenticationPassword" type="Password" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PasswordModifyRequest">
    <xs:annotation>
      <xs:documentation>
        Modify the password for a user/administrator.
        When oldPassword is specified, password rule applies. If oldPassword in not specified,
        any password rule related to old password does not apply.
        The response is either a SuccessResponse or an ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="userId" type="UserId"/>
          <xs:element name="oldPassword" type="Password" minOccurs="0"/>
          <xs:element name="newPassword" type="Password"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PrimaryInfoGetRequest">
    <xs:annotation>
      <xs:documentation>
        Requests information about the primary server for high-availability support.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="isPrivate" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Dual homed side is private?
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="isAddressInfoRequested" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                For optimization, we only get the hostname and addresses for primary if
                they are explicitly requested or if the current server is not the primary.
                So you might get back the list of server addresses even if you did not
                ask for the list if the request is not serviced by the primary server.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PrimaryInfoGetResponse">
    <xs:annotation>
      <xs:documentation>
        Information about the primary server in the high-availablity cluster.
        For optimization, we only get the hostname and addresses for primary if they are
        explicitly requested or if the current server is not the primary.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="isPrimary" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Is the server that processed this request the primary in the cluster?</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="hostnameForPrimary" type="NetAddress" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Primary server's hostname.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="addressForPrimary" type="NetAddress" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>List of addresses for primary server in cluster.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="privateAddressForPrimary" type="NetAddress" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>List of private addresses for primary server in cluster.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PublicClusterGetFullyQualifiedDomainNameRequest">
    <xs:annotation>
      <xs:documentation>
        Get the public cluster fully qualified domain name (FQDN).
        The response is either a PublicClusterGetFullyQualifiedDomainNameResponse
        or an ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PublicClusterGetFullyQualifiedDomainNameResponse">
    <xs:annotation>
      <xs:documentation>
        Response to PublicClusterGetFullyQualifiedDomainNameRequest.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="publicClusterFQDN" type="DomainName" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TutorialFlagGetRequest">
    <xs:annotation>
      <xs:documentation>
        Get the tutorial flag setting for a user or admin.
        The response is either a TutorialFlagGetResponse or an ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="userId" type="UserId"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TutorialFlagGetResponse">
    <xs:annotation>
      <xs:documentation>
        Response to the TutorialFlagGetRequest.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="enableTutorial" type="xs:boolean"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TutorialFlagModifyRequest">
    <xs:annotation>
      <xs:documentation>
        Modify the tutorial flag setting for a user or admin.
        The response is either a SuccessResponse or an ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="userId" type="UserId"/>
          <xs:element name="enableTutorial" type="xs:boolean" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="UserGetLoginInfoRequest22V4">
    <xs:annotation>
      <xs:documentation>
        UserGetLoginInfoRequest22V4 is used to access login information for a user
        either by a userId, dn or lineport.
        The phone number may be any DN associated with a user.
        The lineport may be any lineport associated with a user.

        The response is a UserGetLoginInfoResponse22V4 or an ErrorResponse.

        The following elements are only used in AS data mode and ignored in XS and Amplify data mode.
          loginRole
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:choice>
            <xs:sequence>
              <xs:element name="userId" type="UserId"/>
              <xs:element name="loginRole" type="LoginRole" minOccurs="0"/>
            </xs:sequence>
            <xs:element name="phoneNumber" type="DN"/>
            <xs:element name="linePort" type="AccessDeviceEndpointLinePort"/>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="UserGetLoginInfoResponse22V4">
    <xs:annotation>
      <xs:documentation>
        Response to UserGetLoginInfoRequest22V4

        The following data elements are only used in AS data mode:
          resellerId

        If a phoneNumber is returned, it will be the primary DN of the user
        The parameter
         tokenRevocationTime is represented in the number of milliseconds
        since January 1, 1970, 00:00:00 GMT, and it is set to the more current time between
        the system level token revocation time and user level token revocation time.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="loginType" type="LoginType22"/>
          <xs:element name="locale" type="OCILocale22"/>
          <xs:element name="encoding" type="Encoding"/>
          <xs:element name="groupId" type="GroupId" minOccurs="0"/>
          <xs:element name="serviceProviderId" type="ServiceProviderId" minOccurs="0"/>
          <xs:element name="isEnterprise" type="xs:boolean"/>
          <xs:element name="passwordExpiresDays" type="xs:int" minOccurs="0"/>
          <xs:element name="lastName" type="LastName" minOccurs="0"/>
          <xs:element name="firstName" type="FirstName" minOccurs="0"/>
          <xs:element name="userId" type="UserId"/>
          <xs:element name="phoneNumber" type="DN" minOccurs="0"/>
          <xs:element name="resellerId" type="ResellerId22" minOccurs="0"/>
          <xs:element name="tokenRevocationTime" type="xs:long" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="UserSingleSignOnCreateDeviceTokenRequest">
    <xs:annotation>
      <xs:documentation>
        This command allows a BroadWorks or Third-Party Client Application to
        create a Single Sign-On token for a device of a user.
        The token is created only if:
        1. the specified user is the owner of a lineport on the specified device
           (including a trunk user on a trunk device).
        2. and, the specified device is not in locked state.
        3. and, the device type of the device does support Device Management.
        The response is either UserSingleSignOnCreateDeviceTokenResponse
        or ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence>
          <xs:element name="userId" type="UserId"/>
          <xs:element name="deviceLevel" type="AccessDeviceLevel"/>
          <xs:element name="deviceName" type="AccessDeviceName"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="UserSingleSignOnCreateDeviceTokenResponse">
    <xs:annotation>
      <xs:documentation>
        Response to UserSingleSignOnCreateDeviceTokenRequest.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIDataResponse">
        <xs:sequence>
          <xs:element name="deviceToken" type="LoginToken"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VerifySessionIsValidRequest">
    <xs:annotation>
      <xs:documentation>
        Query the provisioning server to verify the session is authorized. Most
        applications should not need this command, because the provisioning server
        verifies the session is authorized for all commands.
        The response is either a SuccessResponse or an ErrorResponse.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="core:OCIRequest">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- ******************************************************************** -->
  <!-- M E S S A G E   P A R A M E T E R S                                  -->
  <!-- ******************************************************************** -->
  <!--
  The Login specific non-primitive attributes are listed here in alphabetical order.
  -->


  <xs:complexType name="PasswordForAccessDevice">
    <xs:annotation>
      <xs:documentation>
        Passwords to be generated for an access device.
        The combination of serviceProviderId, groupId, and deviceName will be used
        to find the device if it exists. If the device doesn't exist yet, then
        the serviceProviderId and groupId will be used to choose the password
        rules with which to generate the device password.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="serviceProviderId" type="ServiceProviderId" minOccurs="0"/>
      <xs:element name="groupId" type="GroupId" minOccurs="0"/>
      <xs:element name="deviceName" type="AccessDeviceName" minOccurs="0"/>
      <xs:element name="generateDeviceAuthenticationPassword" type="xs:boolean" fixed="true"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="PasswordForGroupAdministrator">
    <xs:annotation>
      <xs:documentation>
        Password to be generated for a group administrator. If the administratorId is not included, or included but
        is not an exiting administrator for the group, a password will be generated based on only the rules applicable
        for a new user.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="serviceProviderId" type="ServiceProviderId"/>
      <xs:element name="groupId" type="GroupId"/>
      <xs:element name="administratorId" type="UserId" minOccurs="0"/>
      <xs:element name="generatePassword" type="xs:boolean" fixed="true"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="PasswordForServiceProviderAdministrator">
    <xs:annotation>
      <xs:documentation>
        Password to be generated for a service provider administrator. If the administratorId is not included,
        or included but is not an exiting administrator for the service provider, a password will be generated
        based on only the rules applicable for a new user.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="serviceProviderId" type="ServiceProviderId"/>
      <xs:element name="administratorId" type="UserId" minOccurs="0"/>
      <xs:element name="generatePassword" type="xs:boolean" fixed="true"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="PasswordForSystemAdministrator">
    <xs:annotation>
      <xs:documentation>
        Password to be generated for a System or Provisioning administrator. If the administratorId is
        not included, or included but is not an exiting administrator for the
        service provider, a password will be generated
        based on only the rules applicable for a new user.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="administratorId" type="UserId" minOccurs="0"/>
      <xs:element name="generatePassword" type="xs:boolean" fixed="true"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="PasswordForTrunkGroup">
    <xs:annotation>
      <xs:documentation>
        Passwords to be generated for a trunk group.
        The combination of serviceProviderId, groupId, and name will be used to
        find the trunk group if it exists. If the trunk group doesn't exist yet,
        then the serviceProviderId and groupId will be used to choose the password
        rules with which to generate the trunk group password.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="serviceProviderId" type="ServiceProviderId"/>
      <xs:element name="groupId" type="GroupId"/>
      <xs:element name="name" type="TrunkGroupName" minOccurs="0"/>
      <xs:element name="generateTrunkGroupAuthenticationPassword" type="xs:boolean" fixed="true"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="PasswordForUser">
    <xs:annotation>
      <xs:documentation>
        Passwords, passcode and SIP authentication passwords to be generated for a user. If the userId is not
        included or included but is not an existing user in the group, a password will be generated based on only
        the rules applicable for a new user.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="serviceProviderId" type="ServiceProviderId"/>
      <xs:element name="groupId" type="GroupId"/>
      <xs:element name="userId" type="UserId" minOccurs="0"/>
      <xs:element name="generatePassword" type="xs:boolean" fixed="true" minOccurs="0"/>
      <xs:element name="generatePasscode" type="xs:boolean" fixed="true" minOccurs="0"/>
      <xs:element name="generateSipPassword" type="xs:boolean" fixed="true" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:simpleType name="LogoutRequestReason">
    <xs:annotation>
      <xs:documentation>
        Logout request reason.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:token">
      <xs:enumeration value="Client Logout"/>
      <xs:enumeration value="Server Connection Failure"/>
      <xs:enumeration value="Open Client Server Forced Logout"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
